{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  props: ['id'],\n  // Ensure this is receiving the route param 'id'\n  data() {\n    return {\n      event: null,\n      // Event object that will hold the data fetched from the API\n      errorMessage: '' // Error handling\n    };\n  },\n  created() {\n    console.log(`Fetching event with ID: ${this.id}`); // Log the ID received via the route\n\n    // Fetch the event based on the passed ID when the component is created\n    axios.get(`http://localhost:3000/api/events/${this.id}`).then(response => {\n      console.log('Event data fetched successfully:', response.data); // Log the fetched event data\n      this.event = response.data; // Store the fetched event data\n    }).catch(error => {\n      console.error('Error fetching event:', error);\n      this.errorMessage = 'Failed to load event data.';\n    });\n  },\n  methods: {\n    updateEvent() {\n      console.log('Updating event with data:', this.event); // Log the event data being submitted\n\n      // Update the event using a PUT request\n      axios.put(`http://localhost:3000/api/events/${this.id}`, this.event).then(response => {\n        console.log('Event updated successfully:', response.data); // Log successful response\n        alert('Event updated successfully!');\n        this.$router.push('/'); // Redirect to the event list after a successful update\n      }).catch(error => {\n        console.error('Error updating event:', error);\n        this.errorMessage = 'Failed to update the event.';\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","props","data","event","errorMessage","created","console","log","id","get","then","response","catch","error","methods","updateEvent","put","alert","$router","push"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/components/EditEvent.vue"],"sourcesContent":["<template>\n  <div v-if=\"event\">\n    <h2>Edit Event</h2>\n    <form @submit.prevent=\"updateEvent\">\n      <div>\n        <label for=\"name\">Event Name:</label>\n        <input type=\"text\" v-model=\"event.name\" id=\"name\" required />\n      </div>\n      <div>\n        <label for=\"description\">Description:</label>\n        <textarea v-model=\"event.description\" id=\"description\"></textarea>\n      </div>\n      <div>\n        <label for=\"date\">Date:</label>\n        <input type=\"date\" v-model=\"event.date\" id=\"date\" required />\n      </div>\n      <button type=\"submit\">Update Event</button>\n    </form>\n  </div>\n  <div v-else>\n    <p>Loading event data...</p> <!-- Loading state until event is fetched -->\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  props: ['id'], // Ensure this is receiving the route param 'id'\n  data() {\n    return {\n      event: null, // Event object that will hold the data fetched from the API\n      errorMessage: '' // Error handling\n    };\n  },\n  created() {\n    console.log(`Fetching event with ID: ${this.id}`); // Log the ID received via the route\n\n    // Fetch the event based on the passed ID when the component is created\n    axios.get(`http://localhost:3000/api/events/${this.id}`)\n      .then(response => {\n        console.log('Event data fetched successfully:', response.data); // Log the fetched event data\n        this.event = response.data; // Store the fetched event data\n      })\n      .catch(error => {\n        console.error('Error fetching event:', error);\n        this.errorMessage = 'Failed to load event data.';\n      });\n  },\n  methods: {\n    updateEvent() {\n      console.log('Updating event with data:', this.event); // Log the event data being submitted\n\n      // Update the event using a PUT request\n      axios.put(`http://localhost:3000/api/events/${this.id}`, this.event)\n        .then(response => {\n          console.log('Event updated successfully:', response.data); // Log successful response\n          alert('Event updated successfully!');\n          this.$router.push('/'); // Redirect to the event list after a successful update\n        })\n        .catch(error => {\n          console.error('Error updating event:', error);\n          this.errorMessage = 'Failed to update the event.';\n        });\n    }\n  }\n};\n</script>\n"],"mappings":";AAyBA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,KAAK,EAAE,CAAC,IAAI,CAAC;EAAE;EACfC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,IAAI;MAAE;MACbC,YAAY,EAAE,EAAC,CAAE;IACnB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACRC,OAAO,CAACC,GAAG,CAAC,2BAA2B,IAAI,CAACC,EAAE,EAAE,CAAC,EAAE;;IAEnD;IACAR,KAAK,CAACS,GAAG,CAAC,oCAAoC,IAAI,CAACD,EAAE,EAAE,EACpDE,IAAI,CAACC,QAAO,IAAK;MAChBL,OAAO,CAACC,GAAG,CAAC,kCAAkC,EAAEI,QAAQ,CAACT,IAAI,CAAC,EAAE;MAChE,IAAI,CAACC,KAAI,GAAIQ,QAAQ,CAACT,IAAI,EAAE;IAC9B,CAAC,EACAU,KAAK,CAACC,KAAI,IAAK;MACdP,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;MAC7C,IAAI,CAACT,YAAW,GAAI,4BAA4B;IAClD,CAAC,CAAC;EACN,CAAC;EACDU,OAAO,EAAE;IACPC,WAAWA,CAAA,EAAG;MACZT,OAAO,CAACC,GAAG,CAAC,2BAA2B,EAAE,IAAI,CAACJ,KAAK,CAAC,EAAE;;MAEtD;MACAH,KAAK,CAACgB,GAAG,CAAC,oCAAoC,IAAI,CAACR,EAAE,EAAE,EAAE,IAAI,CAACL,KAAK,EAChEO,IAAI,CAACC,QAAO,IAAK;QAChBL,OAAO,CAACC,GAAG,CAAC,6BAA6B,EAAEI,QAAQ,CAACT,IAAI,CAAC,EAAE;QAC3De,KAAK,CAAC,6BAA6B,CAAC;QACpC,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,GAAG,CAAC,EAAE;MAC1B,CAAC,EACAP,KAAK,CAACC,KAAI,IAAK;QACdP,OAAO,CAACO,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC7C,IAAI,CAACT,YAAW,GAAI,6BAA6B;MACnD,CAAC,CAAC;IACN;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}