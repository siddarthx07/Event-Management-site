{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport \"core-js/modules/web.dom-exception.stack.js\";\nexport default {\n  name: 'App',\n  data() {\n    return {\n      username: '' // Make username reactive by setting it empty initially\n    };\n  },\n  computed: {\n    // Check if the user is logged in by checking the presence of the token\n    isLoggedIn() {\n      const token = localStorage.getItem('token');\n      const loggedInStatus = !!token; // Convert token presence to boolean\n      console.log('Is logged in:', loggedInStatus); // Log the value\n      return loggedInStatus;\n    }\n  },\n  methods: {\n    // Logout method to clear token and redirect to login\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('username'); // Clear stored username\n      this.username = ''; // Reset username\n      this.$router.push('/login');\n      alert('You have successfully logged out!');\n    },\n    updateUsername() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // Decode the token and set the username from the payload\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          this.username = payload.username;\n        } catch (error) {\n          console.error('Error decoding token:', error);\n        }\n      }\n    }\n  },\n  watch: {\n    // Watch for changes in isLoggedIn and update the username accordingly\n    isLoggedIn(newValue) {\n      if (newValue) {\n        this.updateUsername();\n      } else {\n        this.username = ''; // Clear username if logged out\n      }\n    }\n  },\n  created() {\n    if (this.isLoggedIn) {\n      this.updateUsername(); // Fetch username when the app is created\n    }\n  }\n};","map":{"version":3,"names":["name","data","username","computed","isLoggedIn","token","localStorage","getItem","loggedInStatus","console","log","methods","logout","removeItem","$router","push","alert","updateUsername","payload","JSON","parse","atob","split","error","watch","newValue","created"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <nav>\n      <!-- Navigation Links -->\n      <span v-if=\"isLoggedIn\">Welcome, {{ username }}!</span>      \n      <router-link v-if=\"isLoggedIn\" to=\"/events\">Events</router-link>\n      <button v-if=\"isLoggedIn\" @click=\"logout\">Logout</button> <!-- Logout Button -->\n      <!-- Show login/register links if the user is not logged in -->\n      <router-link v-if=\"!isLoggedIn\" to=\"/login\">Sign In</router-link>\n    </nav>\n    \n    <!-- Routed components will be displayed here -->\n    <router-view></router-view>\n  </div> \n</template>\n\n<script>\nexport default {\n  name: 'App',\n  data() {\n    return {\n      username: '', // Make username reactive by setting it empty initially\n    };\n  },\n  computed: {\n    // Check if the user is logged in by checking the presence of the token\n    isLoggedIn() {\n    const token = localStorage.getItem('token');\n    const loggedInStatus = !!token;  // Convert token presence to boolean\n    console.log('Is logged in:', loggedInStatus);  // Log the value\n    return loggedInStatus;\n    }\n  },\n  methods: {\n    // Logout method to clear token and redirect to login\n    logout() {\n      localStorage.removeItem('token');\n      localStorage.removeItem('username'); // Clear stored username\n      this.username = ''; // Reset username\n      this.$router.push('/login');\n      alert('You have successfully logged out!');\n    },\n    updateUsername() {\n      const token = localStorage.getItem('token');\n      if (token) {\n        try {\n          // Decode the token and set the username from the payload\n          const payload = JSON.parse(atob(token.split('.')[1]));\n          this.username = payload.username;\n        } catch (error) {\n          console.error('Error decoding token:', error);\n        }\n      }\n    }\n  },\n  watch: {\n    // Watch for changes in isLoggedIn and update the username accordingly\n    isLoggedIn(newValue) {\n      if (newValue) {\n        this.updateUsername();\n      } else {\n        this.username = ''; // Clear username if logged out\n      }\n    }\n  },\n  created() {\n    if (this.isLoggedIn) {\n      this.updateUsername(); // Fetch username when the app is created\n    }\n  }\n};\n</script>\n"],"mappings":";;AAiBA,eAAe;EACbA,IAAI,EAAE,KAAK;EACXC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAE,EAAE,CAAE;IAChB,CAAC;EACH,CAAC;EACDC,QAAQ,EAAE;IACR;IACAC,UAAUA,CAAA,EAAG;MACb,MAAMC,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,MAAMC,cAAa,GAAI,CAAC,CAACH,KAAK,EAAG;MACjCI,OAAO,CAACC,GAAG,CAAC,eAAe,EAAEF,cAAc,CAAC,EAAG;MAC/C,OAAOA,cAAc;IACrB;EACF,CAAC;EACDG,OAAO,EAAE;IACP;IACAC,MAAMA,CAAA,EAAG;MACPN,YAAY,CAACO,UAAU,CAAC,OAAO,CAAC;MAChCP,YAAY,CAACO,UAAU,CAAC,UAAU,CAAC,EAAE;MACrC,IAAI,CAACX,QAAO,GAAI,EAAE,EAAE;MACpB,IAAI,CAACY,OAAO,CAACC,IAAI,CAAC,QAAQ,CAAC;MAC3BC,KAAK,CAAC,mCAAmC,CAAC;IAC5C,CAAC;IACDC,cAAcA,CAAA,EAAG;MACf,MAAMZ,KAAI,GAAIC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;MAC3C,IAAIF,KAAK,EAAE;QACT,IAAI;UACF;UACA,MAAMa,OAAM,GAAIC,IAAI,CAACC,KAAK,CAACC,IAAI,CAAChB,KAAK,CAACiB,KAAK,CAAC,GAAG,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;UACrD,IAAI,CAACpB,QAAO,GAAIgB,OAAO,CAAChB,QAAQ;QAClC,EAAE,OAAOqB,KAAK,EAAE;UACdd,OAAO,CAACc,KAAK,CAAC,uBAAuB,EAAEA,KAAK,CAAC;QAC/C;MACF;IACF;EACF,CAAC;EACDC,KAAK,EAAE;IACL;IACApB,UAAUA,CAACqB,QAAQ,EAAE;MACnB,IAAIA,QAAQ,EAAE;QACZ,IAAI,CAACR,cAAc,CAAC,CAAC;MACvB,OAAO;QACL,IAAI,CAACf,QAAO,GAAI,EAAE,EAAE;MACtB;IACF;EACF,CAAC;EACDwB,OAAOA,CAAA,EAAG;IACR,IAAI,IAAI,CAACtB,UAAU,EAAE;MACnB,IAAI,CAACa,cAAc,CAAC,CAAC,EAAE;IACzB;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}