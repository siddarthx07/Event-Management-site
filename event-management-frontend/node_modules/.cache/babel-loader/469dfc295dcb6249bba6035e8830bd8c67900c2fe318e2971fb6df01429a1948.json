{"ast":null,"code":"import { createElementVNode as _createElementVNode, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[0] || (_cache[0] = _createElementVNode(\"h1\", null, \"Event List\", -1 /* HOISTED */)), _createElementVNode(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.events, event => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: event.id\n    }, [_createTextVNode(_toDisplayString(event.name) + \" - \" + _toDisplayString($options.formatDate(event.date)) + \" \", 1 /* TEXT */), _createElementVNode(\"button\", {\n      onClick: $event => $options.editEvent(event.id)\n    }, \"Edit\", 8 /* PROPS */, _hoisted_1)]);\n  }), 128 /* KEYED_FRAGMENT */))])]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_Fragment","_renderList","$data","events","event","key","id","_createTextVNode","_toDisplayString","name","$options","formatDate","date","onClick","$event","editEvent","_hoisted_1"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/components/EventList.vue"],"sourcesContent":["<template>\n  <div>\n    <h1>Event List</h1>\n    <ul>\n      <li v-for=\"event in events\" :key=\"event.id\">\n        {{ event.name }} - {{ formatDate(event.date) }}\n        <button @click=\"editEvent(event.id)\">Edit</button>\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { useRouter } from 'vue-router';\n\nexport default {\n  data() {\n    return {\n      events: []\n    };\n  },\n  created() {\n    axios.get('http://localhost:3000/api/events')\n      .then(response => {\n        this.events = response.data;\n      })\n      .catch(error => {\n        console.error('Error fetching events:', error);\n      });\n  },\n  methods: {\n    formatDate(date) {\n      return new Date(date).toLocaleDateString();\n    },\n    editEvent(eventId) {\n      // Navigate to the EditEvent component for the selected event\n      this.$router.push({ name: 'edit-event', params: { id: eventId } });\n    }\n  }\n};\n</script>\n"],"mappings":";mBAAA;;uBACEA,mBAAA,CAQM,c,0BAPJC,mBAAA,CAAmB,YAAf,YAAU,sBACdA,mBAAA,CAKK,c,kBAJHD,mBAAA,CAGKE,SAAA,QAPXC,WAAA,CAI0BC,KAAA,CAAAC,MAAM,EAAfC,KAAK;yBAAhBN,mBAAA,CAGK;MAHwBO,GAAG,EAAED,KAAK,CAACE;QAJ9CC,gBAAA,CAAAC,gBAAA,CAKWJ,KAAK,CAACK,IAAI,IAAG,KAAG,GAAAD,gBAAA,CAAGE,QAAA,CAAAC,UAAU,CAACP,KAAK,CAACQ,IAAI,KAAI,GAC/C,iBAAAb,mBAAA,CAAkD;MAAzCc,OAAK,EAAAC,MAAA,IAAEJ,QAAA,CAAAK,SAAS,CAACX,KAAK,CAACE,EAAE;OAAG,MAAI,iBANjDU,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}