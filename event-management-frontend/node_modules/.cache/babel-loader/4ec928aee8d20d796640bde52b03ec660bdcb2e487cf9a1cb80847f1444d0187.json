{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nimport { useToast } from \"vue-toastification\";\nexport default {\n  props: ['id'],\n  data() {\n    return {\n      event: null,\n      formattedDate: '',\n      // Store the correctly formatted date for the input field\n      errorMessage: ''\n    };\n  },\n  created() {\n    console.log('Event ID:', this.id);\n    this.fetchEvent(); // Fetch event data when the component is created\n  },\n  methods: {\n    toast: useToast(),\n    // Fetch the event data from the server\n    fetchEvent() {\n      console.log('Fetching event with ID:', this.id);\n      axios.get(`http://localhost:3000/api/events/${this.id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}` // Ensure the token is sent\n        }\n      }).then(response => {\n        this.event = response.data;\n        this.formattedDate = this.formatDate(this.event.date); // Format the date correctly for the input field\n      }).catch(error => {\n        console.error('Error fetching event data:', error);\n        this.$toast.error(\"Failed to load event data.\");\n      });\n    },\n    // Format the date to \"yyyy-MM-dd\" format for the date input field\n    formatDate(isoString) {\n      const date = new Date(isoString);\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Add leading zero\n      const day = date.getDate().toString().padStart(2, '0'); // Add leading zero\n      return `${year}-${month}-${day}`; // Return the formatted date\n    },\n    // Update the event with the new data\n    updateEvent() {\n      // Set the event's date to the correctly formatted date from the input field\n      this.event.date = this.formattedDate;\n      axios.put(`http://localhost:3000/api/events/${this.id}`, this.event, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}` // Ensure the token is sent\n        }\n      }).then(() => {\n        this.$toast.success(\"Event updated successfully!\");\n        this.$router.push('/events'); // Redirect to the event list after a successful update\n      }).catch(error => {\n        this.$toast.error(\"Failed to update event.\");\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","useToast","props","data","event","formattedDate","errorMessage","created","console","log","id","fetchEvent","methods","toast","get","headers","Authorization","localStorage","getItem","then","response","formatDate","date","catch","error","$toast","isoString","Date","year","getFullYear","month","getMonth","toString","padStart","day","getDate","updateEvent","put","success","$router","push"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/components/EditEvent.vue"],"sourcesContent":["<template>\n  <div v-if=\"event\">\n    <h2>Edit Event: {{ event.name }}</h2>\n    <form @submit.prevent=\"updateEvent\">\n      <div>\n        <label for=\"name\">Event Name:</label>\n        <input type=\"text\" v-model=\"event.name\" id=\"name\" required />\n      </div>\n\n      <div>\n        <label for=\"description\">Description:</label>\n        <textarea v-model=\"event.description\" id=\"description\"></textarea>\n      </div>\n\n      <div>\n        <label for=\"date\">Date:</label>\n        <!-- Format the date correctly for the date input field -->\n        <input type=\"date\" v-model=\"formattedDate\" id=\"date\" required />\n      </div>\n\n      <button type=\"submit\">Update Event</button>\n    </form>\n  </div>\n  <div v-else>\n    <p v-if=\"errorMessage\">{{ errorMessage }}</p>\n    <p>Loading event data...</p>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport { useToast } from \"vue-toastification\";\n\nexport default {\n  props: ['id'],\n  data() {\n    return {\n      event: null,\n      formattedDate: '', // Store the correctly formatted date for the input field\n      errorMessage: ''\n    };\n  },\n  created() {\n    console.log('Event ID:', this.id);\n    this.fetchEvent(); // Fetch event data when the component is created\n  },\n  methods: {\n\n    toast: useToast(),\n\n    // Fetch the event data from the server\n    fetchEvent() {\n        console.log('Fetching event with ID:', this.id);\n\n      axios.get(`http://localhost:3000/api/events/${this.id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}` // Ensure the token is sent\n        }\n      })\n      .then(response => {\n        this.event = response.data;\n        this.formattedDate = this.formatDate(this.event.date); // Format the date correctly for the input field\n      })\n      .catch(error => {\n        console.error('Error fetching event data:', error);\n        this.$toast.error(\"Failed to load event data.\");\n      });\n    },\n\n    // Format the date to \"yyyy-MM-dd\" format for the date input field\n    formatDate(isoString) {\n      const date = new Date(isoString);\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Add leading zero\n      const day = date.getDate().toString().padStart(2, '0'); // Add leading zero\n      return `${year}-${month}-${day}`; // Return the formatted date\n    },\n\n    // Update the event with the new data\n    updateEvent() {\n      // Set the event's date to the correctly formatted date from the input field\n      this.event.date = this.formattedDate;\n\n      axios.put(`http://localhost:3000/api/events/${this.id}`, this.event, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}` // Ensure the token is sent\n        }\n      })\n      .then(() => {\n        this.$toast.success(\"Event updated successfully!\");\n        this.$router.push('/events'); // Redirect to the event list after a successful update\n      })\n      .catch(error => {\n        this.$toast.error(\"Failed to update event.\");\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Your styles here */\n</style>\n"],"mappings":";AA8BA,OAAOA,KAAI,MAAO,OAAO;AACzB,SAASC,QAAO,QAAS,oBAAoB;AAE7C,eAAe;EACbC,KAAK,EAAE,CAAC,IAAI,CAAC;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,KAAK,EAAE,IAAI;MACXC,aAAa,EAAE,EAAE;MAAE;MACnBC,YAAY,EAAE;IAChB,CAAC;EACH,CAAC;EACDC,OAAOA,CAAA,EAAG;IACRC,OAAO,CAACC,GAAG,CAAC,WAAW,EAAE,IAAI,CAACC,EAAE,CAAC;IACjC,IAAI,CAACC,UAAU,CAAC,CAAC,EAAE;EACrB,CAAC;EACDC,OAAO,EAAE;IAEPC,KAAK,EAAEZ,QAAQ,CAAC,CAAC;IAEjB;IACAU,UAAUA,CAAA,EAAG;MACTH,OAAO,CAACC,GAAG,CAAC,yBAAyB,EAAE,IAAI,CAACC,EAAE,CAAC;MAEjDV,KAAK,CAACc,GAAG,CAAC,oCAAoC,IAAI,CAACJ,EAAE,EAAE,EAAE;QACvDK,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAC,CAAE;QAC3D;MACF,CAAC,EACAC,IAAI,CAACC,QAAO,IAAK;QAChB,IAAI,CAAChB,KAAI,GAAIgB,QAAQ,CAACjB,IAAI;QAC1B,IAAI,CAACE,aAAY,GAAI,IAAI,CAACgB,UAAU,CAAC,IAAI,CAACjB,KAAK,CAACkB,IAAI,CAAC,EAAE;MACzD,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;QACdhB,OAAO,CAACgB,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;QAClD,IAAI,CAACC,MAAM,CAACD,KAAK,CAAC,4BAA4B,CAAC;MACjD,CAAC,CAAC;IACJ,CAAC;IAED;IACAH,UAAUA,CAACK,SAAS,EAAE;MACpB,MAAMJ,IAAG,GAAI,IAAIK,IAAI,CAACD,SAAS,CAAC;MAChC,MAAME,IAAG,GAAIN,IAAI,CAACO,WAAW,CAAC,CAAC;MAC/B,MAAMC,KAAI,GAAI,CAACR,IAAI,CAACS,QAAQ,CAAC,IAAI,CAAC,EAAEC,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MACjE,MAAMC,GAAE,GAAIZ,IAAI,CAACa,OAAO,CAAC,CAAC,CAACH,QAAQ,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,EAAE,GAAG,CAAC,EAAE;MACxD,OAAO,GAAGL,IAAI,IAAIE,KAAK,IAAII,GAAG,EAAE,EAAE;IACpC,CAAC;IAED;IACAE,WAAWA,CAAA,EAAG;MACZ;MACA,IAAI,CAAChC,KAAK,CAACkB,IAAG,GAAI,IAAI,CAACjB,aAAa;MAEpCL,KAAK,CAACqC,GAAG,CAAC,oCAAoC,IAAI,CAAC3B,EAAE,EAAE,EAAE,IAAI,CAACN,KAAK,EAAE;QACnEW,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,EAAC,CAAE;QAC3D;MACF,CAAC,EACAC,IAAI,CAAC,MAAM;QACV,IAAI,CAACM,MAAM,CAACa,OAAO,CAAC,6BAA6B,CAAC;QAClD,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,SAAS,CAAC,EAAE;MAChC,CAAC,EACAjB,KAAK,CAACC,KAAI,IAAK;QACd,IAAI,CAACC,MAAM,CAACD,KAAK,CAAC,yBAAyB,CAAC;MAC9C,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}