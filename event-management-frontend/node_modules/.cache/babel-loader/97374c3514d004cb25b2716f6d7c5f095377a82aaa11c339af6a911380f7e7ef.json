{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AppNavbar = _resolveComponent(\"AppNavbar\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Global Navbar \"), _createVNode(_component_AppNavbar, {\n    onFilterEvents: $options.handleFilter\n  }, null, 8 /* PROPS */, [\"onFilterEvents\"]), _createCommentVNode(\" Routed components will be displayed here \"), _createVNode(_component_router_view)]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createCommentVNode","_createVNode","_component_AppNavbar","onFilterEvents","$options","handleFilter","_component_router_view"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/App.vue"],"sourcesContent":["<template>\n  <div id=\"app\">\n    <!-- Global Navbar -->\n    <AppNavbar @filter-events=\"handleFilter\" />\n\n    <!-- Routed components will be displayed here -->\n    <router-view></router-view>\n  </div>\n</template>\n\n<script>\nimport AppNavbar from './components/AppNavbar.vue';\n\nexport default {\n  name: 'App',\n  components: {\n    AppNavbar // Register the multi-word component\n  },\n  methods: {\n    handleFilter(filterCriteria) {\n      // Handle filter criteria, possibly emit to child components or use Vuex\n      // For demonstration, we'll emit the event to be captured by child components\n      this.$root.$emit('filter-events', filterCriteria);\n    }\n  },\n  created() {\n    const token = localStorage.getItem('token');\n    \n    if (token) {\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        console.log('Token Payload:', payload);\n        localStorage.setItem('username', payload.username);\n        localStorage.setItem('role', payload.role);\n        // The AppNavbar component already reads from localStorage for username and role\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        localStorage.removeItem('role');\n      }\n    }\n\n    // Listen for filter events if needed\n    this.$root.$on('filter-events', this.handleFilter);\n  },\n  beforeUnmount() { // Use beforeUnmount instead of beforeDestroy\n    // Clean up event listeners\n    this.$root.$off('filter-events', this.handleFilter);\n  }\n};\n</script>\n\n<style>\n/* Global styles */\nbody {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  background-color: #f9f9f9;\n  margin: 0;\n}\n</style>\n"],"mappings":";;EACOA,EAAE,EAAC;AAAK;;;;uBAAbC,mBAAA,CAMM,OANNC,UAMM,GALJC,mBAAA,mBAAsB,EACtBC,YAAA,CAA2CC,oBAAA;IAA/BC,cAAa,EAAEC,QAAA,CAAAC;EAAY,6CAEvCL,mBAAA,8CAAiD,EACjDC,YAAA,CAA2BK,sBAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}