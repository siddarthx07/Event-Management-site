{"ast":null,"code":"import { createCommentVNode as _createCommentVNode, resolveComponent as _resolveComponent, openBlock as _openBlock, createBlock as _createBlock, createVNode as _createVNode, createElementBlock as _createElementBlock } from \"vue\";\nconst _hoisted_1 = {\n  id: \"app\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_AppNavbar = _resolveComponent(\"AppNavbar\");\n  const _component_router_view = _resolveComponent(\"router-view\");\n  return _openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createCommentVNode(\" Conditionally render Navbar based on route meta \"), !$setup.hideNavbar ? (_openBlock(), _createBlock(_component_AppNavbar, {\n    key: 0,\n    onFilterEvents: $setup.handleFilter\n  }, null, 8 /* PROPS */, [\"onFilterEvents\"])) : _createCommentVNode(\"v-if\", true), _createCommentVNode(\" Routed components will be displayed here \"), _createVNode(_component_router_view, {\n    filters: $setup.filters\n  }, null, 8 /* PROPS */, [\"filters\"])]);\n}","map":{"version":3,"names":["id","_createElementBlock","_hoisted_1","_createCommentVNode","$setup","hideNavbar","_createBlock","_component_AppNavbar","key","onFilterEvents","handleFilter","_createVNode","_component_router_view","filters"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/App.vue"],"sourcesContent":["<!-- src/App.vue -->\n\n<template>\n  <div id=\"app\">\n    <!-- Conditionally render Navbar based on route meta -->\n    <AppNavbar v-if=\"!hideNavbar\" @filter-events=\"handleFilter\" />\n\n    <!-- Routed components will be displayed here -->\n    <router-view :filters=\"filters\" />\n  </div>\n</template>\n\n<script>\nimport AppNavbar from './components/AppNavbar.vue';\nimport { ref, computed } from 'vue';\nimport { useRouter, useRoute } from 'vue-router';\n\nexport default {\n  name: 'App',\n  components: {\n    AppNavbar\n  },\n  setup() {\n    const router = useRouter();\n    const route = useRoute();\n\n    const filters = ref({\n      search: route.query.search || '',\n      startDate: route.query.startDate || '',\n      endDate: route.query.endDate || ''\n    });\n\n    // Computed property to check if navbar should be hidden\n    const hideNavbar = computed(() => route.meta.hideNavbar);\n\n    const handleFilter = (filterCriteria) => {\n      filters.value = filterCriteria;\n      // Update the route's query parameters to pass filters to routed components\n      router.push({ \n        name: route.name, \n        query: filterCriteria \n      });\n    };\n\n    return {\n      filters,\n      handleFilter,\n      hideNavbar\n    };\n  },\n  created() {\n    const token = localStorage.getItem('token');\n    \n    if (token) {\n      try {\n        const payload = JSON.parse(atob(token.split('.')[1]));\n        console.log('Token Payload:', payload);\n        localStorage.setItem('username', payload.username);\n        localStorage.setItem('role', payload.role);\n      } catch (error) {\n        console.error('Error decoding token:', error);\n        localStorage.removeItem('token');\n        localStorage.removeItem('username');\n        localStorage.removeItem('role');\n      }\n    }\n  }\n};\n</script>\n\n<style>\n/* Global styles */\nbody {\n  font-family: Avenir, Helvetica, Arial, sans-serif;\n  background-color: #f9f9f9;\n  margin: 0;\n}\n</style>\n"],"mappings":";;EAGOA,EAAE,EAAC;AAAK;;;;uBAAbC,mBAAA,CAMM,OANNC,UAMM,GALJC,mBAAA,qDAAwD,E,CACtCC,MAAA,CAAAC,UAAU,I,cAA5BC,YAAA,CAA8DC,oBAAA;IALlEC,GAAA;IAKmCC,cAAa,EAAEL,MAAA,CAAAM;iDALlDP,mBAAA,gBAOIA,mBAAA,8CAAiD,EACjDQ,YAAA,CAAkCC,sBAAA;IAApBC,OAAO,EAAET,MAAA,CAAAS;EAAO,qC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}