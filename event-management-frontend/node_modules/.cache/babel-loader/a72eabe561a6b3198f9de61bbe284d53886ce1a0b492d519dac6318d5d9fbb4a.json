{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, vModelText as _vModelText, withDirectives as _withDirectives, withModifiers as _withModifiers, openBlock as _openBlock, createElementBlock as _createElementBlock, createCommentVNode as _createCommentVNode } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = {\n  key: 1\n};\nconst _hoisted_3 = {\n  key: 0\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return $data.event ? (_openBlock(), _createElementBlock(\"div\", _hoisted_1, [_createElementVNode(\"h2\", null, \"Edit Event: \" + _toDisplayString($data.event.name), 1 /* TEXT */), _createElementVNode(\"form\", {\n    onSubmit: _cache[3] || (_cache[3] = _withModifiers((...args) => $options.updateEvent && $options.updateEvent(...args), [\"prevent\"]))\n  }, [_createElementVNode(\"div\", null, [_cache[4] || (_cache[4] = _createElementVNode(\"label\", {\n    for: \"name\"\n  }, \"Event Name:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"text\",\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.event.name = $event),\n    id: \"name\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.event.name]])]), _createElementVNode(\"div\", null, [_cache[5] || (_cache[5] = _createElementVNode(\"label\", {\n    for: \"description\"\n  }, \"Description:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"textarea\", {\n    \"onUpdate:modelValue\": _cache[1] || (_cache[1] = $event => $data.event.description = $event),\n    id: \"description\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.event.description]])]), _createElementVNode(\"div\", null, [_cache[6] || (_cache[6] = _createElementVNode(\"label\", {\n    for: \"date\"\n  }, \"Date:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.formattedDate = $event),\n    id: \"date\",\n    required: \"\"\n  }, null, 512 /* NEED_PATCH */), [[_vModelText, $data.formattedDate]])]), _cache[7] || (_cache[7] = _createElementVNode(\"button\", {\n    type: \"submit\"\n  }, \"Update Event\", -1 /* HOISTED */))], 32 /* NEED_HYDRATION */)])) : (_openBlock(), _createElementBlock(\"div\", _hoisted_2, [$data.errorMessage ? (_openBlock(), _createElementBlock(\"p\", _hoisted_3, _toDisplayString($data.errorMessage), 1 /* TEXT */)) : _createCommentVNode(\"v-if\", true), _cache[8] || (_cache[8] = _createElementVNode(\"p\", null, \"Loading event data...\", -1 /* HOISTED */))]));\n}","map":{"version":3,"names":["key","$data","event","_createElementBlock","_hoisted_1","_createElementVNode","_toDisplayString","name","onSubmit","_cache","_withModifiers","args","$options","updateEvent","for","type","$event","id","required","description","formattedDate","_hoisted_2","errorMessage","_hoisted_3","_createCommentVNode"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/components/EditEvent.vue"],"sourcesContent":["<template>\n  <div v-if=\"event\">\n    <h2>Edit Event: {{ event.name }}</h2>\n    <form @submit.prevent=\"updateEvent\">\n      <div>\n        <label for=\"name\">Event Name:</label>\n        <input type=\"text\" v-model=\"event.name\" id=\"name\" required />\n      </div>\n\n      <div>\n        <label for=\"description\">Description:</label>\n        <textarea v-model=\"event.description\" id=\"description\"></textarea>\n      </div>\n\n      <div>\n        <label for=\"date\">Date:</label>\n        <input type=\"date\" v-model=\"formattedDate\" id=\"date\" required />\n      </div>\n\n      <button type=\"submit\">Update Event</button>\n    </form>\n  </div>\n  <div v-else>\n    <p v-if=\"errorMessage\">{{ errorMessage }}</p>\n    <p>Loading event data...</p>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  props: ['id'],\n  data() {\n    return {\n      event: null,\n      formattedDate: '', // Store the correctly formatted date for the input field\n      errorMessage: ''\n    };\n  },\n  created() {\n    this.fetchEvent(); // Fetch event data when the component is created\n  },\n  methods: {\n    // Fetch the event data from the server\n    fetchEvent() {\n      axios.get(`http://localhost:3000/api/events/${this.id}`, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}` // Ensure the token is sent\n        }\n      })\n      .then(response => {\n        this.event = response.data;\n        this.formattedDate = this.formatDate(this.event.date); // Format the date correctly for the input field\n      })\n      .catch(() => {\n        this.$toast.error('Failed to load event data.'); // Show toast for loading error\n      });\n    },\n\n    // Format the date to \"yyyy-MM-dd\" format for the date input field\n    formatDate(isoString) {\n      const date = new Date(isoString);\n      const year = date.getFullYear();\n      const month = (date.getMonth() + 1).toString().padStart(2, '0'); // Add leading zero\n      const day = date.getDate().toString().padStart(2, '0'); // Add leading zero\n      return `${year}-${month}-${day}`; // Return the formatted date\n    },\n\n    // Update the event with the new data\n    updateEvent() {\n      // Set the event's date to the correctly formatted date from the input field\n      this.event.date = this.formattedDate;\n\n      axios.put(`http://localhost:3000/api/events/${this.id}`, this.event, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}` // Ensure the token is sent\n        }\n      })\n      .then(() => {\n        this.$toast.success('Event updated successfully!'); // Show success toast\n        this.$router.push('/events'); // Redirect to the event list after a successful update\n      })\n      .catch(() => {\n        this.$toast.error('Failed to update the event.'); // Show error toast\n      });\n    }\n  }\n};\n</script>\n\n<style scoped>\n/* Your styles here */\n</style>\n"],"mappings":";;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;EAAAA,GAAA;AAAA;;SACaC,KAAA,CAAAC,KAAK,I,cAAhBC,mBAAA,CAoBM,OArBRC,UAAA,GAEIC,mBAAA,CAAqC,YAAjC,cAAY,GAAAC,gBAAA,CAAGL,KAAA,CAAAC,KAAK,CAACK,IAAI,kBAC7BF,mBAAA,CAiBO;IAjBAG,QAAM,EAAAC,MAAA,QAAAA,MAAA,MAHjBC,cAAA,KAAAC,IAAA,KAG2BC,QAAA,CAAAC,WAAA,IAAAD,QAAA,CAAAC,WAAA,IAAAF,IAAA,CAAW;MAChCN,mBAAA,CAGM,c,0BAFJA,mBAAA,CAAqC;IAA9BS,GAAG,EAAC;EAAM,GAAC,aAAW,sB,gBAC7BT,mBAAA,CAA6D;IAAtDU,IAAI,EAAC,MAAM;IAN1B,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAMoCf,KAAA,CAAAC,KAAK,CAACK,IAAI,GAAAS,MAAA;IAAEC,EAAE,EAAC,MAAM;IAACC,QAAQ,EAAR;iDAAtBjB,KAAA,CAAAC,KAAK,CAACK,IAAI,E,KAGxCF,mBAAA,CAGM,c,0BAFJA,mBAAA,CAA6C;IAAtCS,GAAG,EAAC;EAAa,GAAC,cAAY,sB,gBACrCT,mBAAA,CAAkE;IAX1E,uBAAAI,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAW2Bf,KAAA,CAAAC,KAAK,CAACiB,WAAW,GAAAH,MAAA;IAAEC,EAAE,EAAC;iDAAtBhB,KAAA,CAAAC,KAAK,CAACiB,WAAW,E,KAGtCd,mBAAA,CAGM,c,0BAFJA,mBAAA,CAA+B;IAAxBS,GAAG,EAAC;EAAM,GAAC,OAAK,sB,gBACvBT,mBAAA,CAAgE;IAAzDU,IAAI,EAAC,MAAM;IAhB1B,uBAAAN,MAAA,QAAAA,MAAA,MAAAO,MAAA,IAgBoCf,KAAA,CAAAmB,aAAa,GAAAJ,MAAA;IAAEC,EAAE,EAAC,MAAM;IAACC,QAAQ,EAAR;iDAAzBjB,KAAA,CAAAmB,aAAa,E,+BAG3Cf,mBAAA,CAA2C;IAAnCU,IAAI,EAAC;EAAQ,GAAC,cAAY,qB,+CAGtCZ,mBAAA,CAGM,OAzBRkB,UAAA,GAuBapB,KAAA,CAAAqB,YAAY,I,cAArBnB,mBAAA,CAA6C,KAvBjDoB,UAAA,EAAAjB,gBAAA,CAuB8BL,KAAA,CAAAqB,YAAY,oBAvB1CE,mBAAA,gB,0BAwBInB,mBAAA,CAA4B,WAAzB,uBAAqB,qB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}