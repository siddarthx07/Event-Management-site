{"ast":null,"code":"import { createElementVNode as _createElementVNode, resolveComponent as _resolveComponent, createVNode as _createVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, withCtx as _withCtx } from \"vue\";\nconst _hoisted_1 = {\n  key: 0\n};\nconst _hoisted_2 = [\"onClick\"];\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_create_event = _resolveComponent(\"create-event\");\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[9] || (_cache[9] = _createElementVNode(\"h2\", null, \"Organize Your Events\", -1 /* HOISTED */)), _createVNode(_component_create_event, {\n    onEventCreated: $options.refreshEvents\n  }, null, 8 /* PROPS */, [\"onEventCreated\"]), _createCommentVNode(\" Search Bar \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchQuery = $event),\n    placeholder: \"Search by name\",\n    onInput: _cache[1] || (_cache[1] = (...args) => $options.fetchEvents && $options.fetchEvents(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createCommentVNode(\" Date Range Filter \"), _createElementVNode(\"div\", null, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"startDate\"\n  }, \"Start Date:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.startDate = $event),\n    onChange: _cache[3] || (_cache[3] = (...args) => $options.fetchEvents && $options.fetchEvents(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.startDate]]), _cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    for: \"endDate\"\n  }, \"End Date:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.endDate = $event),\n    onChange: _cache[5] || (_cache[5] = (...args) => $options.fetchEvents && $options.fetchEvents(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.endDate]])]), _createCommentVNode(\" Clear Filters Button \"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => $options.clearFilters && $options.clearFilters(...args))\n  }, \"Clear Filters\"), $data.events.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_1, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.events, event => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: event.id\n    }, [_createVNode(_component_router_link, {\n      to: {\n        name: 'event-details',\n        params: {\n          id: event.id\n        }\n      }\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(event.name) + \" - \" + _toDisplayString($options.formatDate(event.date)), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"]), _createElementVNode(\"button\", {\n      onClick: $event => $options.editEvent(event.id)\n    }, \"Edit\", 8 /* PROPS */, _hoisted_2), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteEvent(event.id)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_3)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_4, \"You haven't organized any events yet.\"))]);\n}","map":{"version":3,"names":["key","_createElementBlock","_createElementVNode","_createVNode","_component_create_event","onEventCreated","$options","refreshEvents","_createCommentVNode","_cache","$event","$data","searchQuery","placeholder","onInput","args","fetchEvents","for","type","startDate","onChange","endDate","onClick","clearFilters","events","length","_hoisted_1","_Fragment","_renderList","event","id","_component_router_link","to","name","params","default","_withCtx","_createTextVNode","_toDisplayString","formatDate","date","_","editEvent","_hoisted_2","deleteEvent","_hoisted_3","_hoisted_4"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/components/OrganizeEvents.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Organize Your Events</h2>\n\n    <create-event @event-created=\"refreshEvents\" />\n\n    <!-- Search Bar -->\n    <input v-model=\"searchQuery\" placeholder=\"Search by name\" @input=\"fetchEvents\" />\n\n    <!-- Date Range Filter -->\n    <div>\n      <label for=\"startDate\">Start Date:</label>\n      <input type=\"date\" v-model=\"startDate\" @change=\"fetchEvents\" />\n\n      <label for=\"endDate\">End Date:</label>\n      <input type=\"date\" v-model=\"endDate\" @change=\"fetchEvents\" />\n    </div>\n\n    <!-- Clear Filters Button -->\n    <button @click=\"clearFilters\">Clear Filters</button>\n    \n      <ul v-if=\"events.length\">\n        <li v-for=\"event in events\" :key=\"event.id\">\n          <router-link :to=\"{ name: 'event-details', params: { id: event.id } }\">\n            {{ event.name }} - {{ formatDate(event.date) }}\n          </router-link>\n          <button @click=\"editEvent(event.id)\">Edit</button>\n          <button @click=\"deleteEvent(event.id)\">Delete</button>\n        </li>\n      </ul>\n      <p v-else>You haven't organized any events yet.</p>\n    </div>\n  \n</template>\n\n<script>\nimport axios from 'axios';\nimport CreateEvent from './CreateEvent.vue';\n\nexport default {\n  components: {\n    CreateEvent  // Import the CreateEvent component\n  },\n  data() {\n    return {\n      events: [],  // Holds the list of events created by the organizer\n      searchQuery: '',  // For search functionality, if needed\n      startDate: '',\n      endDate: ''\n    };\n  },\n  created() {\n    this.fetchEvents();  // Fetch events created by the organizer on component creation\n  },\n  methods: {\n    // Fetch events created by the logged-in organizer\n    fetchEvents() {\n      const params = {\n        name: this.searchQuery,\n        startDate: this.startDate,\n        endDate: this.endDate\n      };\n      axios.get('http://localhost:3000/api/events', {\n        params,\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      })\n      .then(response => {\n        this.events = response.data;\n      })\n      .catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n\n    // Edit an event (redirect to edit page)\n    editEvent(eventId) {\n      this.$router.push({ name: 'edit-event', params: { id: eventId } });\n    },\n    clearFilters() {\n      this.searchQuery = '';\n      this.startDate = '';\n      this.endDate = '';\n      this.fetchEvents();\n    },\n\n    // Delete an event\n    deleteEvent(eventId) {\n      if (confirm('Are you sure you want to delete this event?')) {\n        axios.delete(`http://localhost:3000/api/events/${eventId}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`  // Include JWT token\n          }\n        })\n        .then(() => {\n          alert('Event deleted successfully!');\n          this.fetchMyEvents();  // Refresh the events list after deletion\n        })\n        .catch(error => {\n          console.error('Error deleting event:', error);\n        });\n      }\n    },\n\n    // Format date for display\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toISOString().split('T')[0];  // Format date as YYYY-MM-DD\n    },\n\n    // Refresh events after event creation or deletion\n    refreshEvents() {\n      this.fetchMyEvents();  // Re-fetch the events list\n    }\n  }\n};\n</script>\n"],"mappings":";;EAAAA,GAAA;AAAA;mBAAA;mBAAA;;EAAAA,GAAA;AAAA;;;;uBACEC,mBAAA,CA8BQ,c,0BA7BNC,mBAAA,CAA6B,YAAzB,sBAAoB,sBAExBC,YAAA,CAA+CC,uBAAA;IAAhCC,cAAa,EAAEC,QAAA,CAAAC;EAAa,6CAE3CC,mBAAA,gBAAmB,E,gBACnBN,mBAAA,CAAiF;IAPrF,uBAAAO,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAOoBC,KAAA,CAAAC,WAAW,GAAAF,MAAA;IAAEG,WAAW,EAAC,gBAAgB;IAAEC,OAAK,EAAAL,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAET,QAAA,CAAAU,WAAA,IAAAV,QAAA,CAAAU,WAAA,IAAAD,IAAA,CAAW;iEAA7DJ,KAAA,CAAAC,WAAW,E,GAE3BJ,mBAAA,uBAA0B,EAC1BN,mBAAA,CAMM,c,0BALJA,mBAAA,CAA0C;IAAnCe,GAAG,EAAC;EAAW,GAAC,aAAW,sB,gBAClCf,mBAAA,CAA+D;IAAxDgB,IAAI,EAAC,MAAM;IAZxB,uBAAAT,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAYkCC,KAAA,CAAAQ,SAAS,GAAAT,MAAA;IAAGU,QAAM,EAAAX,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAET,QAAA,CAAAU,WAAA,IAAAV,QAAA,CAAAU,WAAA,IAAAD,IAAA,CAAW;iEAA/BJ,KAAA,CAAAQ,SAAS,E,6BAErCjB,mBAAA,CAAsC;IAA/Be,GAAG,EAAC;EAAS,GAAC,WAAS,sB,gBAC9Bf,mBAAA,CAA6D;IAAtDgB,IAAI,EAAC,MAAM;IAfxB,uBAAAT,MAAA,QAAAA,MAAA,MAAAC,MAAA,IAekCC,KAAA,CAAAU,OAAO,GAAAX,MAAA;IAAGU,QAAM,EAAAX,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAET,QAAA,CAAAU,WAAA,IAAAV,QAAA,CAAAU,WAAA,IAAAD,IAAA,CAAW;iEAA7BJ,KAAA,CAAAU,OAAO,E,KAGrCb,mBAAA,0BAA6B,EAC7BN,mBAAA,CAAoD;IAA3CoB,OAAK,EAAAb,MAAA,QAAAA,MAAA,UAAAM,IAAA,KAAET,QAAA,CAAAiB,YAAA,IAAAjB,QAAA,CAAAiB,YAAA,IAAAR,IAAA,CAAY;KAAE,eAAa,GAE/BJ,KAAA,CAAAa,MAAM,CAACC,MAAM,I,cAAvBxB,mBAAA,CAQK,MA7BXyB,UAAA,I,kBAsBQzB,mBAAA,CAMK0B,SAAA,QA5BbC,WAAA,CAsB4BjB,KAAA,CAAAa,MAAM,EAAfK,KAAK;yBAAhB5B,mBAAA,CAMK;MANwBD,GAAG,EAAE6B,KAAK,CAACC;QACtC3B,YAAA,CAEc4B,sBAAA;MAFAC,EAAE;QAAAC,IAAA;QAAAC,MAAA;UAAAJ,EAAA,EAAyCD,KAAK,CAACC;QAAE;MAAA;;MAvB3EK,OAAA,EAAAC,QAAA,CAwBY,MAAgB,CAxB5BC,gBAAA,CAAAC,gBAAA,CAwBeT,KAAK,CAACI,IAAI,IAAG,KAAG,GAAAK,gBAAA,CAAGhC,QAAA,CAAAiC,UAAU,CAACV,KAAK,CAACW,IAAI,kB;MAxBvDC,CAAA;iDA0BUvC,mBAAA,CAAkD;MAAzCoB,OAAK,EAAAZ,MAAA,IAAEJ,QAAA,CAAAoC,SAAS,CAACb,KAAK,CAACC,EAAE;OAAG,MAAI,iBA1BnDa,UAAA,GA2BUzC,mBAAA,CAAsD;MAA7CoB,OAAK,EAAAZ,MAAA,IAAEJ,QAAA,CAAAsC,WAAW,CAACf,KAAK,CAACC,EAAE;OAAG,QAAM,iBA3BvDe,UAAA,E;qDA8BM5C,mBAAA,CAAmD,KA9BzD6C,UAAA,EA8BgB,uCAAqC,G","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}