{"ast":null,"code":"import { createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, vModelText as _vModelText, withDirectives as _withDirectives, renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode } from \"vue\";\nconst _hoisted_1 = {\n  class: \"my-events\"\n};\nconst _hoisted_2 = {\n  key: 0\n};\nconst _hoisted_3 = [\"onClick\"];\nconst _hoisted_4 = [\"onClick\"];\nconst _hoisted_5 = {\n  key: 1\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_cache[10] || (_cache[10] = _createElementVNode(\"h2\", null, \"Organize Your Events\", -1 /* HOISTED */)), _createCommentVNode(\" List of events created by the organizer \"), _createElementVNode(\"div\", _hoisted_1, [_cache[9] || (_cache[9] = _createElementVNode(\"h3\", null, \"Your Events\", -1 /* HOISTED */)), _createCommentVNode(\" Search Bar \"), _withDirectives(_createElementVNode(\"input\", {\n    \"onUpdate:modelValue\": _cache[0] || (_cache[0] = $event => $data.searchQuery = $event),\n    placeholder: \"Search by name\",\n    onInput: _cache[1] || (_cache[1] = (...args) => _ctx.fetchEvents && _ctx.fetchEvents(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.searchQuery]]), _createCommentVNode(\" Date Range Filter \"), _createElementVNode(\"div\", null, [_cache[7] || (_cache[7] = _createElementVNode(\"label\", {\n    for: \"startDate\"\n  }, \"Start Date:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[2] || (_cache[2] = $event => $data.startDate = $event),\n    onChange: _cache[3] || (_cache[3] = (...args) => _ctx.fetchEvents && _ctx.fetchEvents(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.startDate]]), _cache[8] || (_cache[8] = _createElementVNode(\"label\", {\n    for: \"endDate\"\n  }, \"End Date:\", -1 /* HOISTED */)), _withDirectives(_createElementVNode(\"input\", {\n    type: \"date\",\n    \"onUpdate:modelValue\": _cache[4] || (_cache[4] = $event => $data.endDate = $event),\n    onChange: _cache[5] || (_cache[5] = (...args) => _ctx.fetchEvents && _ctx.fetchEvents(...args))\n  }, null, 544 /* NEED_HYDRATION, NEED_PATCH */), [[_vModelText, $data.endDate]])]), _createCommentVNode(\" Clear Filters Button \"), _createElementVNode(\"button\", {\n    onClick: _cache[6] || (_cache[6] = (...args) => _ctx.clearFilters && _ctx.clearFilters(...args))\n  }, \"Clear Filters\"), $data.events.length ? (_openBlock(), _createElementBlock(\"ul\", _hoisted_2, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.events, event => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: event.id\n    }, [_createVNode(_component_router_link, {\n      to: {\n        name: 'event-details',\n        params: {\n          id: event.id\n        }\n      }\n    }, {\n      default: _withCtx(() => [_createTextVNode(_toDisplayString(event.name) + \" - \" + _toDisplayString($options.formatDate(event.date)), 1 /* TEXT */)]),\n      _: 2 /* DYNAMIC */\n    }, 1032 /* PROPS, DYNAMIC_SLOTS */, [\"to\"]), _createElementVNode(\"button\", {\n      onClick: $event => $options.editEvent(event.id)\n    }, \"Edit\", 8 /* PROPS */, _hoisted_3), _createElementVNode(\"button\", {\n      onClick: $event => $options.deleteEvent(event.id)\n    }, \"Delete\", 8 /* PROPS */, _hoisted_4)]);\n  }), 128 /* KEYED_FRAGMENT */))])) : (_openBlock(), _createElementBlock(\"p\", _hoisted_5, \"You haven't organized any events yet.\"))])]);\n}","map":{"version":3,"names":["class","key","_createElementBlock","_createElementVNode","_createCommentVNode","_hoisted_1","_cache","$event","$data","searchQuery","placeholder","onInput","args","_ctx","fetchEvents","for","type","startDate","onChange","endDate","onClick","clearFilters","events","length","_hoisted_2","_Fragment","_renderList","event","id","_createVNode","_component_router_link","to","name","params","default","_withCtx","_createTextVNode","_toDisplayString","$options","formatDate","date","_","editEvent","_hoisted_3","deleteEvent","_hoisted_4","_hoisted_5"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/components/OrganizeEvents.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Organize Your Events</h2>\n\n    \n\n    <!-- List of events created by the organizer -->\n    <div class=\"my-events\">\n      <h3>Your Events</h3>\n       <!-- Search Bar -->\n    <input v-model=\"searchQuery\" placeholder=\"Search by name\" @input=\"fetchEvents\" />\n\n    <!-- Date Range Filter -->\n    <div>\n      <label for=\"startDate\">Start Date:</label>\n      <input type=\"date\" v-model=\"startDate\" @change=\"fetchEvents\" />\n\n      <label for=\"endDate\">End Date:</label>\n      <input type=\"date\" v-model=\"endDate\" @change=\"fetchEvents\" />\n    </div>\n        <!-- Clear Filters Button -->\n    <button @click=\"clearFilters\">Clear Filters</button>\n    \n      <ul v-if=\"events.length\">\n        <li v-for=\"event in events\" :key=\"event.id\">\n          <router-link :to=\"{ name: 'event-details', params: { id: event.id } }\">\n            {{ event.name }} - {{ formatDate(event.date) }}\n          </router-link>\n          <button @click=\"editEvent(event.id)\">Edit</button>\n          <button @click=\"deleteEvent(event.id)\">Delete</button>\n        </li>\n      </ul>\n      <p v-else>You haven't organized any events yet.</p>\n    </div>\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';\nimport CreateEvent from './CreateEvent.vue';\n\nexport default {\n  components: {\n    CreateEvent  // Import the CreateEvent component\n  },\n  data() {\n    return {\n      events: [],  // Holds the list of events created by the organizer\n      searchQuery: '',  // For search functionality, if needed\n      startDate: '',\n      endDate: ''\n    };\n  },\n  created() {\n    this.fetchMyEvents();  // Fetch events created by the organizer on component creation\n  },\n  methods: {\n    // Fetch events created by the logged-in organizer\n    fetchMyEvents() {\n      axios.get('http://localhost:3000/api/events/myevents', {  // Update the endpoint to fetch user-specific events\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`  // Include JWT token\n        }\n      })\n      .then(response => {\n        this.events = response.data;  // Store events data\n      })\n      .catch(error => {\n        console.error('Error fetching events:', error);\n      });\n    },\n\n    // Edit an event (redirect to edit page)\n    editEvent(eventId) {\n      this.$router.push({ name: 'edit-event', params: { id: eventId } });\n    },\n\n    // Delete an event\n    deleteEvent(eventId) {\n      if (confirm('Are you sure you want to delete this event?')) {\n        axios.delete(`http://localhost:3000/api/events/${eventId}`, {\n          headers: {\n            Authorization: `Bearer ${localStorage.getItem('token')}`  // Include JWT token\n          }\n        })\n        .then(() => {\n          alert('Event deleted successfully!');\n          this.fetchMyEvents();  // Refresh the events list after deletion\n        })\n        .catch(error => {\n          console.error('Error deleting event:', error);\n        });\n      }\n    },\n\n    // Format date for display\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toISOString().split('T')[0];  // Format date as YYYY-MM-DD\n    },\n\n    // Refresh events after event creation or deletion\n    refreshEvents() {\n      this.fetchMyEvents();  // Re-fetch the events list\n    }\n  }\n};\n</script>\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}