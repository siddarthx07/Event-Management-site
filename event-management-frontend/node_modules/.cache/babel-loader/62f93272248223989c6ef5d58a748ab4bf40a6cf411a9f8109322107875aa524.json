{"ast":null,"code":"import { renderList as _renderList, Fragment as _Fragment, openBlock as _openBlock, createElementBlock as _createElementBlock, toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createTextVNode as _createTextVNode } from \"vue\";\nconst _hoisted_1 = [\"onClick\"];\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  return _openBlock(), _createElementBlock(\"ul\", null, [(_openBlock(true), _createElementBlock(_Fragment, null, _renderList($data.events, event => {\n    return _openBlock(), _createElementBlock(\"li\", {\n      key: event.id\n    }, [_createTextVNode(_toDisplayString(event.name) + \" - \" + _toDisplayString($options.formatDate(event.date)) + \" \", 1), _createElementVNode(\"button\", {\n      onClick: $event => $options.editEvent(event.id)\n    }, \"Edit\", 8, _hoisted_1)]);\n  }), 128))]);\n}","map":{"version":3,"names":["_createElementBlock","_Fragment","_renderList","$data","events","event","key","id","_createTextVNode","_toDisplayString","name","$options","formatDate","date","_createElementVNode","onClick","$event","editEvent","_hoisted_1"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/components/EventList.vue"],"sourcesContent":["<template>\n  <ul>\n    <li v-for=\"event in events\" :key=\"event.id\">\n      {{ event.name }} - {{ formatDate(event.date) }}\n      <button @click=\"editEvent(event.id)\">Edit</button>\n    </li>\n  </ul>\n</template>\n\n<script>\nimport axios from 'axios';\n\nexport default {\n  data() {\n    return {\n      events: []  // Store the list of events\n    };\n  },\n  created() {\n    // Fetch all events when the component is created\n    axios.get('http://localhost:3000/api/events')\n      .then(response => {\n        this.events = response.data;\n      })\n      .catch(error => {\n        console.error('Error fetching events:', error);\n      });\n  },\n  methods: {\n    formatDate(dateString) {\n      const date = new Date(dateString);\n      return date.toISOString().split('T')[0];  // Formats the date as YYYY-MM-DD\n    },\n  editEvent(eventId) {\n    // Use $router.push to navigate to the edit page for the selected event\n    this.$router.push({ name: 'edit-event', params: { id: eventId } });\n  }\n  }\n};\n</script>\n"],"mappings":";mBAAA;;uBACEA,mBAAA,CAKK,c,kBAJHA,mBAAA,CAGKC,SAAA,QALTC,WAAA,CAEwBC,KAAA,CAAAC,MAAM,EAAfC,KAAK;yBAAhBL,mBAAA,CAGK;MAHwBM,GAAG,EAAED,KAAK,CAACE;QAF5CC,gBAAA,CAAAC,gBAAA,CAGSJ,KAAK,CAACK,IAAI,IAAG,KAAG,GAAAD,gBAAA,CAAGE,QAAA,CAAAC,UAAU,CAACP,KAAK,CAACQ,IAAI,KAAI,GAC/C,MAAAC,mBAAA,CAAkD;MAAzCC,OAAK,EAAAC,MAAA,IAAEL,QAAA,CAAAM,SAAS,CAACZ,KAAK,CAACE,EAAE;OAAG,MAAI,KAJ/CW,UAAA,E","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}