{"ast":null,"code":"import { toDisplayString as _toDisplayString, createElementVNode as _createElementVNode, createCommentVNode as _createCommentVNode, createTextVNode as _createTextVNode, resolveComponent as _resolveComponent, withCtx as _withCtx, createVNode as _createVNode, openBlock as _openBlock, createElementBlock as _createElementBlock } from \"vue\";\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_router_link = _resolveComponent(\"router-link\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"h2\", null, \"Welcome, \" + _toDisplayString($data.username) + \"!\", 1 /* TEXT */), _cache[2] || (_cache[2] = _createElementVNode(\"p\", null, \"Select an option:\", -1 /* HOISTED */)), _createCommentVNode(\" User Options: View or Organize Events \"), _createVNode(_component_router_link, {\n    to: \"/events\"\n  }, {\n    default: _withCtx(() => _cache[1] || (_cache[1] = [_createTextVNode(\"View Events\")])),\n    _: 1 /* STABLE */\n  }), _cache[3] || (_cache[3] = _createTextVNode(\" | \")), _createElementVNode(\"button\", {\n    onClick: _cache[0] || (_cache[0] = (...args) => _ctx.becomeOrganizer && _ctx.becomeOrganizer(...args))\n  }, \"Organize Events\"), _createCommentVNode(\" Button to change role to 'organizer' \")]);\n}","map":{"version":3,"names":["_createElementBlock","_createElementVNode","_toDisplayString","$data","username","_createCommentVNode","_createVNode","_component_router_link","to","default","_withCtx","_cache","_createTextVNode","_","onClick","args","_ctx","becomeOrganizer"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/components/UserDashboard.vue"],"sourcesContent":["<!-- UserDashboard.vue -->\n<template>\n  <div>\n    <h2>Welcome, {{ username }}!</h2>\n    <p>Select an option:</p>\n\n    <!-- User Options: View or Organize Events -->\n    <router-link to=\"/events\">View Events</router-link> | \n    <button @click=\"becomeOrganizer\">Organize Events</button> <!-- Button to change role to 'organizer' -->\n  </div>\n</template>\n\n<script>\nexport default {\n  data() {\n    return {\n      username: localStorage.getItem('username'),\n      role: localStorage.getItem('role')  // Assuming role is stored after login\n    };\n  },\n  computed: {\n    isOrganizer() {\n      return this.role === 'organizer' || this.role === 'admin'; // Check if the user is an organizer or admin\n    }\n  }\n};\n</script>\n"],"mappings":";;;uBAEEA,mBAAA,CAOM,cANJC,mBAAA,CAAiC,YAA7B,WAAS,GAAAC,gBAAA,CAAGC,KAAA,CAAAC,QAAQ,IAAG,GAAC,iB,0BAC5BH,mBAAA,CAAwB,WAArB,mBAAiB,sBAEpBI,mBAAA,2CAA8C,EAC9CC,YAAA,CAAmDC,sBAAA;IAAtCC,EAAE,EAAC;EAAS;IAP7BC,OAAA,EAAAC,QAAA,CAO8B,MAAWC,MAAA,QAAAA,MAAA,OAPzCC,gBAAA,CAO8B,aAAW,E;IAPzCC,CAAA;gCAAAD,gBAAA,CAOuD,KACnD,IAAAX,mBAAA,CAAyD;IAAhDa,OAAK,EAAAH,MAAA,QAAAA,MAAA,UAAAI,IAAA,KAAEC,IAAA,CAAAC,eAAA,IAAAD,IAAA,CAAAC,eAAA,IAAAF,IAAA,CAAe;KAAE,iBAAe,GAAUV,mBAAA,0CAA6C,C","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}