{"ast":null,"code":"import \"core-js/modules/es.array.push.js\";\nimport axios from 'axios';\nexport default {\n  data() {\n    return {\n      username: localStorage.getItem('username'),\n      role: localStorage.getItem('role') // Get the role from localStorage\n    };\n  },\n  computed: {\n    isOrganizer() {\n      return this.role === 'organizer' || this.role === 'admin'; // Check if the user is an organizer or admin\n    }\n  },\n  methods: {\n    // Function to become an organizer\n\n    becomeOrganizer() {\n      console.log('Token:', localStorage.getItem('token'));\n      axios.put('http://localhost:3000/api/users/role/organizer', {}, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      }).then(response => {\n        // Update the role in localStorage after successful role update\n        localStorage.setItem('role', response.data.role);\n        localStorage.setItem('token', response.data.token);\n\n        // Redirect to the organizer page\n        this.$router.push('/organize');\n      }).catch(error => {\n        console.error('Error updating role:', error);\n        alert('Failed to become an organizer.');\n      });\n    }\n  }\n};","map":{"version":3,"names":["axios","data","username","localStorage","getItem","role","computed","isOrganizer","methods","becomeOrganizer","console","log","put","headers","Authorization","then","response","setItem","token","$router","push","catch","error","alert"],"sources":["/Users/siddarthbandi/Desktop/SID/project/event-management-platform/event-management-frontend/src/components/UserDashboard.vue"],"sourcesContent":["<template>\n  <div>\n    <h2>Welcome, {{ username }}!</h2>\n    <p>Select an option:</p>\n\n    <!-- User Options: View or Organize Events -->\n    <router-link to=\"/events\">View Events</router-link> | \n    <button @click=\"becomeOrganizer\">Organize Events</button> <!-- Button to change role to 'organizer' -->\n  </div>\n</template>\n\n<script>\nimport axios from 'axios';  \n\nexport default {\n  data() {\n    return {\n      username: localStorage.getItem('username'),\n      role: localStorage.getItem('role')  // Get the role from localStorage\n    };\n  },\n  computed: {\n    isOrganizer() {\n      return this.role === 'organizer' || this.role === 'admin'; // Check if the user is an organizer or admin\n    }\n  },\n  methods: {\n    // Function to become an organizer\n    \n    becomeOrganizer() {\n        console.log('Token:', localStorage.getItem('token'));\n\n      axios.put('http://localhost:3000/api/users/role/organizer', {}, {\n        headers: {\n          Authorization: `Bearer ${localStorage.getItem('token')}`\n        }\n      })\n      .then(response => {\n        // Update the role in localStorage after successful role update\n        localStorage.setItem('role', response.data.role);\n        localStorage.setItem('token', response.data.token);\n\n        // Redirect to the organizer page\n        this.$router.push('/organize');\n      })\n      .catch(error => {\n        console.error('Error updating role:', error);\n        alert('Failed to become an organizer.');\n      });\n    }\n  }\n};\n</script>\n"],"mappings":";AAYA,OAAOA,KAAI,MAAO,OAAO;AAEzB,eAAe;EACbC,IAAIA,CAAA,EAAG;IACL,OAAO;MACLC,QAAQ,EAAEC,YAAY,CAACC,OAAO,CAAC,UAAU,CAAC;MAC1CC,IAAI,EAAEF,YAAY,CAACC,OAAO,CAAC,MAAM,EAAG;IACtC,CAAC;EACH,CAAC;EACDE,QAAQ,EAAE;IACRC,WAAWA,CAAA,EAAG;MACZ,OAAO,IAAI,CAACF,IAAG,KAAM,WAAU,IAAK,IAAI,CAACA,IAAG,KAAM,OAAO,EAAE;IAC7D;EACF,CAAC;EACDG,OAAO,EAAE;IACP;;IAEAC,eAAeA,CAAA,EAAG;MACdC,OAAO,CAACC,GAAG,CAAC,QAAQ,EAAER,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC,CAAC;MAEtDJ,KAAK,CAACY,GAAG,CAAC,gDAAgD,EAAE,CAAC,CAAC,EAAE;QAC9DC,OAAO,EAAE;UACPC,aAAa,EAAE,UAAUX,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;QACxD;MACF,CAAC,EACAW,IAAI,CAACC,QAAO,IAAK;QAChB;QACAb,YAAY,CAACc,OAAO,CAAC,MAAM,EAAED,QAAQ,CAACf,IAAI,CAACI,IAAI,CAAC;QAChDF,YAAY,CAACc,OAAO,CAAC,OAAO,EAAED,QAAQ,CAACf,IAAI,CAACiB,KAAK,CAAC;;QAElD;QACA,IAAI,CAACC,OAAO,CAACC,IAAI,CAAC,WAAW,CAAC;MAChC,CAAC,EACAC,KAAK,CAACC,KAAI,IAAK;QACdZ,OAAO,CAACY,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;QAC5CC,KAAK,CAAC,gCAAgC,CAAC;MACzC,CAAC,CAAC;IACJ;EACF;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}